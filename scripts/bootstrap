#! /bin/bash

# Fancy title function
title() {
  COLUMNS=$(tput cols)
  tput clear
  Y=$((($COLUMNS-${#MESSAGE})/2))
  X=1
  tput cup $X $Y
  echo -e "${MESSAGE}"
}

# ANSI properties/colours
ESC='\033[0m'
BOLD='\033[1m'
BLUE='\033[38;34m'
BLUE_UL='\033[38;4;34m'
GREEN='\033[38;32m'
GREEN_UL='\033[38;4;32m'
CYAN='\033[38;36m'
CYAN_IL='\033[38;4;36m'
RED='\033[38;31m'
RED_UL='\033[38;4;31m'
PURPLE='\033[38;35m'
PURPLE_UL='\033[38;4;35m'
YELLOW='\033[38;33m'
YELLOW_UL='\033[38;4;33m'

# Welcome screen
MESSAGE=""$BLUE_UL"Welcome to Save OS X!"$ESC""

title
echo ''
echo -e "Here's some stuff about the project that will be echo'd\non the first screen of the script\n"
echo ''
read -p "Press [Enter] to continue"
clear


# Hack to circumvent system version checks for Mavericks (development)
if [[ $(system_profiler SPSoftwareDataType | grep "System Version" | awk '{print$5}') == "10.9" ]]; then
    sudo sed -i -n 's/10\.9/10\.8/' /System/Library/CoreServices/SystemVersion.plist
else  
    echo "It doesn't look like you're running 10.9(Mavericks). You should checkout the master branch..." && exit
fi

# Grab essential tools (Git, GCC & MacPorts)
MESSAGE=""$RED_UL"Essential Tools$ESC"

title
echo ''
echo -e "This project uses "$BOLD"Git"$ESC", "$BOLD"GCC"$ESC" & "$BOLD"MacPorts"$ESC"\n"
echo ''
echo "Will now download and install essential tools"
echo ''
# Download and install Git
echo "Grabbing Git..."
echo ''
curl https://git-osx-installer.googlecode.com/files/git-1.8.3.2-intel-universal-snow-leopard.dmg > ~/git.dmg
echo ''
echo -e "Now mounting Git's disk image, "$YELLOW"sudo privileges required."$ESC""
sudo hdiutil mount ~/git.dmg 2>&1 > /dev/null
echo ''
echo "Installing Git..."
sudo installer -pkg /Volumes/Git\ 1.8.3.2\ Snow\ Leopard\ Intel\ Universal/*.pkg -target / 2>&1 > /dev/null
echo ''
echo -e ""$GREEN"Git has now been installed!"$ESC""
echo ''
# Download and install GCC with kennethreitz's GCC Installer
echo "Grabbing GCC..."
echo ''
curl -o ~/gcc.pkg -O http://cloud.github.com/downloads/kennethreitz/osx-gcc-installer/GCC-10.7-v2.pkg
echo ''
echo -e "Now installing GCC, "$YELLOW"sudo privileges required."$ESC""
sudo installer -pkg ~/gcc.pkg -target / 2>&1 > /dev/null
echo ''
echo -e ""$GREEN"GCC has now been installed!"$ESC""
echo ''
# Download and install MacPorts
echo "Grabbing MacPorts..."
echo ''
curl https://distfiles.macports.org/MacPorts/MacPorts-2.1.3-10.8-MountainLion.pkg > ~/macports.pkg
echo ''
echo -e "Now installing MacPorts, "$YELLOW"sudo privileges required."$ESC""
sudo installer -pkg ~/macports.pkg -target / 2>&1 > /dev/null
echo ''
echo -e ""$GREEN"MacPorts has now been installed!"$ESC""
echo ''
# Create xcode dummy file to satisfy MacPorts (errors may still echo, but should work fine)
echo -e "Creating XCode dummy file for MacPorts, "$YELLOW"sudo privileges required."$ESC""
sudo mv /usr/bin/xcodebuild{,.orig} 2>&1 > /dev/null
sudo touch /usr/bin/xcodebuild && sudo chmod a+wx /usr/bin/xcodebuild
sudo echo "#!/bin/bash" >> /usr/bin/xcodebuild
sudo echo "if [[ $1 == '-version' ]]; then" >> /usr/bin/xcodebuild
sudo echo "  echo "Xcode 4.4"" >> /usr/bin/xcodebuild
sudo echo "  echo "Build version 4F250"" >> /usr/bin/xcodebuild
sudo echo "else" >> /usr/bin/xcodebuild
sudo echo "  # Pass Through" >> /usr/bin/xcodebuild
sudo echo "  /usr/bin/xcodebuild.orig $@" >> /usr/bin/xcodebuild
sudo echo "fi" >> /usr/bin/xcodebuild
sudo xcode-select --switch /usr/bin 2>&1 > /dev/null
# Clone the Save OS X repo
echo ""$GREEN"Cloning the Save OS X Git repo for other scripts..."
cd ~ ; git clone https://github.com/Phyrne/saveosx
cd ~/saveosx
# Undo the dirty version hack
sudo sed -i -n 's/10\.8/10\.9/' /System/Library/CoreServices/SystemVersion.plist
